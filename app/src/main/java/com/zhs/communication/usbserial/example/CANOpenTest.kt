package com.zhs.communication.usbserial.example

import android.os.Bundle
import android.os.Handler
import android.os.Message
import com.blankj.utilcode.util.LogUtils
import com.zhs.communication.controller.meals.updatezhizupliucheng_u
import com.zhs.communication.controller.time
import com.zhs.communication.usbserial.example.canopen.sdo.callback_sdoserver
import com.zhs.communication.usbserial.example.canopen.sdo.servermy
import com.zhs.communication.utils.getCurrentDate


class callback_sdoserver_2 : callback_sdoserver() {

    companion object {
        var canopentestmytt: updatezhizupliucheng_u? = null
    }

    override fun run_setdata(datasdotd: servermy.datasdot) {
//        System.out.println("callback_sdoserver_2 set data index=${datasdotd.index}" +
//                " subindex=${datasdotd.subindex}" +
//                "datasize=${datasdotd.datasize}" +
//                "data_int=${datasdotd.data_int}")

        canopentestmytt!!.MB_printf(
            "callback_sdoserver_2 set data index=${datasdotd.index}" +
                    " subindex=${datasdotd.subindex}" +
                    "datasize=${datasdotd.datasize}" +
                    "data_int=${datasdotd.data_int}"
        )
        if (datasdotd.index == 0x2010 && datasdotd.subindex == 1) {
            canopentestmytt!!.localsdolistalll["key"] = datasdotd.data_int
        }

    }
}


class CANOpenTest : updatezhizupliucheng_u() {

    companion object {
        private const val TAG = "CANOpenTest"
    }

    var mhandlemprint: Handler? = null

    fun getNetWork(): Network {
        return network
    }

    override fun MB_printf(s: String) {
        super.MB_printf(s)
        mhandlemprint?.apply {
            val msg = Message()
            val bundle = Bundle()

            bundle.putString("datainfo", s)
            bundle.putString("datatype", "log")
            msg.data = bundle
            sendMessage(msg)

            LogUtils.e(TAG, "$TAG printf 发送数据到 mHandler ${s}")
        }
        val currentDate = getCurrentDate()
//        System.out.println(" C DATE is "+currentDate)
        logfileappendtxt(currentDate + s + "\r\n")
    }

    override fun playAudio(name1: String, name2: String?) {

        if (name2 == null) {
            mhandlemprint?.apply {
                val msg = Message()
                val bundle = Bundle()
                bundle.putString("datainfo", "$name1.mp3")
                bundle.putString("datatype", "playaudio")
                msg.data = bundle
                sendMessage(msg)

                LogUtils.e(TAG, "$TAG play_audio 发送数据到 mHandler $name1")
            }
        } else {
            mhandlemprint?.apply {
                val msg = Message()
                val bundle = Bundle()

                bundle.putString("datainfo", "$name1.mp3")
                bundle.putString("datatype", "playaudio")
                msg.data = bundle
                sendMessage(msg)
                LogUtils.e(TAG, "$TAG play_audio 发送数据到 mHandler $name1")

                time.sleep(3000)
                bundle.putString("datainfo", "$name2.mp3")
                bundle.putString("datatype", "playaudio")
                msg.data = bundle
                sendMessage(msg)
                LogUtils.e(TAG, "$TAG play_audio 发送数据到 mHandler $name2")
            }
        }
    }

    fun uploadTest(server: String, index: String, subIndex: String): Boolean {
        var fok = false
        val res = sdoreadindex(server.toInt(16), index.toInt(16), subIndex.toInt(16))
        System.out.print("res = canopensdoclitest ")
//            printbaytearray(res)
        if (res != null) {
            println("canopen 读数据成功 ${res}")
            MB_printf("readsdodata= ${res}")
            fok = true
        } else {
            println("canopen 读数据失败")
        }

//        System.out.println("index = [${index.toInt().toString(16)}]  subindex = [${subindex.toInt()}]")
        return fok
    }

    fun downloadt(
        serv: String,
        index: String,
        subindex: String,
        valueb: String,
        value: String
    ): Boolean {
        var fok = false
//        try {

        val servv = serv.toInt(16)
        val indexx = index.toInt(16)
        val subindexx = subindex.toInt(16)
        val valuebbwei = valueb.toInt()
        val intv = value.toInt()


        fok = sdowriteindex_uintone(servv, indexx, subindexx, intv, valuebbwei)
//            printmytttttinfo("canopen 写数据成功")
//            fok = true
//        }
//        catch (e:Exception){
//            System.out.println("cuowu, $e")
//            printmytttttinfo("canopen 写数据失败")
//        }

        println(
            "index = [${
                index.toInt().toString(16)
            }]  subindex = [${subindex.toInt()}]  data=[${value}]"
        )
        return fok
    }

    init {
        createLogPath()
        println("初始化  ${3}.")
    }

}


